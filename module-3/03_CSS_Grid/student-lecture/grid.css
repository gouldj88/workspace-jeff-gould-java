/* set the column widths for the grid for the div with the div with the class container, which is the entire body of the page*/

.container { /*style all elements with the class="container"*/
    display: grid; /* use the grid layout to display the elements */
    grid-template-columns: 1fr 3fr 1fr; /* define the number and width of the columns*/
    grid-template-areas:                     /* define the rows and the content of the cells in the grid    */
    "header     header  header"              /* first row all columns will be combined and called header    */
    "menu-nav   main    upcoming-events"     /* second row will name each column something different        */
    "footer     footer  footer"              /* all columns will be combined and called footer              */   
    ;

    grid-gap: 10px;

    height: 100vh; /* we wan the container class to fill 100% of the viewport screen height */

    /* assign html components to the grid   */

}

header {
    grid-area: header;      /* assigning the header element to the column(s) named header in the grid */
} 

nav#menu-nav {
    grid-area: menu-nav;    /* assigning the nav element to the id="menu-nav" in the grid */
}

main {
    grid-area: main;        /* assigning the main element to the column(s) named main in the grid */
}

aside {
    grid-area: upcoming-events; /* assigning the aside element to the column(s) upcoming-events in the grid */
}

footer {
    grid-area: footer; /* assigning the footer element to the column(s) named footer in the grid */
}

/* Add responsive design to the page */
@media screen and (max-width: 768px) { /* apply this styling to screens with a maximum width of 768px*/
.container { /* restyle any elements with class="container" */
    grid-template-areas: /* redefine the grid areas on the screen to display horizontally */
    "header"
    "menu-nav"
    "main"
    "upcoming-events"
    "footer"
    ; 

    grid-template-columns: 1fr; /* define a one column grid */
}
}
    
